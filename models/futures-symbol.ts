/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Create API keys in your profile and use public API key as username and secret API key as password to authorize.
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * 
 * @export
 * @interface FuturesSymbol
 */
export interface FuturesSymbol {
    /**
     * Symbol type.
     * @type {string}
     * @memberof FuturesSymbol
     */
    type: FuturesSymbolTypeEnum;
    /**
     * Contract type.
     * @type {string}
     * @memberof FuturesSymbol
     */
    contractType?: FuturesSymbolContractTypeEnum;
    /**
     * Futures expiration date. For the perpetual contracts is `null`.
     * @type {string}
     * @memberof FuturesSymbol
     */
    expiry: string | null;
    /**
     * Futures contract underlying asset.
     * @type {string}
     * @memberof FuturesSymbol
     */
    underlying: string | null;
    /**
     * Name (code) of the base currency. For the futures contracts is `null`.
     * @type {string}
     * @memberof FuturesSymbol
     */
    baseCurrency: string | null;
    /**
     * Name (code) of the quote currency.
     * @type {string}
     * @memberof FuturesSymbol
     */
    quoteCurrency: string;
    /**
     * Exchange status.
     * @type {string}
     * @memberof FuturesSymbol
     */
    status: FuturesSymbolStatusEnum;
    /**
     * Symbol quantity should be divided by this value with no remainder.
     * @type {string}
     * @memberof FuturesSymbol
     */
    quantityIncrement: string;
    /**
     * Symbol price should be divided by this value with no remainder.
     * @type {string}
     * @memberof FuturesSymbol
     */
    tickSize: string;
    /**
     * Default fee rate.
     * @type {string}
     * @memberof FuturesSymbol
     */
    takeRate: string;
    /**
     * Default fee rate for the market making trades.
     * @type {string}
     * @memberof FuturesSymbol
     */
    makeRate: string;
    /**
     * Currency in which fees are determined.
     * @type {string}
     * @memberof FuturesSymbol
     */
    feeCurrency: string;
    /**
     * Determines whether the margin trading is available.
     * @type {boolean}
     * @memberof FuturesSymbol
     */
    marginTrading: boolean;
    /**
     * The maximum leverage available to the user for margin trading. Shown only if `margin_trading` is `true`.
     * @type {string}
     * @memberof FuturesSymbol
     */
    maxInitialLeverage?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FuturesSymbolTypeEnum {
    Spot = 'spot',
    Futures = 'futures'
}
/**
    * @export
    * @enum {string}
    */
export enum FuturesSymbolContractTypeEnum {
    Perpetual = 'perpetual',
    CashSettled = 'cash_settled'
}
/**
    * @export
    * @enum {string}
    */
export enum FuturesSymbolStatusEnum {
    Working = 'working',
    Suspended = 'suspended',
    Clearing = 'clearing'
}

