/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Create API keys in your profile and use public API key as username and secret API key as password to authorize.
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HiddenSpotOrder } from './hidden-spot-order';
import { SpotOrder } from './spot-order';
import { SpotOrderTrades } from './spot-order-trades';
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 extends HiddenSpotOrder {
    /**
     * Unique order identifier as assigned by the exchange.
     * @type {number}
     * @memberof InlineResponse2003
     */
    id: number;
    /**
     * Unique order identifier as assigned by a trader. Uniqueness must be guaranteed within a single trading day, including all active orders.
     * @type {string}
     * @memberof InlineResponse2003
     */
    clientOrderId: string;
    /**
     * Order list identifier. Returned only for an order list request.
     * @type {string}
     * @memberof InlineResponse2003
     */
    orderListId?: string;
    /**
     * Order list type. Returned only for an order list request.
     * @type {string}
     * @memberof InlineResponse2003
     */
    contingencyType?: InlineResponse2003ContingencyTypeEnum;
    /**
     * Symbol code.
     * @type {string}
     * @memberof InlineResponse2003
     */
    symbol: string;
    /**
     * Trade side.
     * @type {string}
     * @memberof InlineResponse2003
     */
    side: InlineResponse2003SideEnum;
    /**
     * Order state:   * *new* — an order is placed in the order book.   * *suspended* — a `stopLimit`, `stopMarket`, `takeProfitLimit` or `takeProfitMarket` order is parked until it meets the conditions for placement in the order book.   * *partiallyFilled* — an order is executed, but a part of its quantity is not filled yet.   * *filled* — order quantity filled completely.   * *canceled* — an order is canceled. It can either be done by a user through a cancel/replace request or by the system under specific circumstances.   * *expired* — an order is deactivated after it no longer satisfies Time in Force (IOC, FOK) or Post Only requirements.   * *rejected* — an order has been rejected. 
     * @type {string}
     * @memberof InlineResponse2003
     */
    status: InlineResponse2003StatusEnum;
    /**
     * Order type.
     * @type {string}
     * @memberof InlineResponse2003
     */
    type: InlineResponse2003TypeEnum;
    /**
     * Order expiration mode:   * *GTC* (\"Good-Till-Canceled\") — an order will not be closed until it is filled.   * *IOC* (\"Immediate-Or-Cancel\") — an order must be executed immediately. Any part of an IOC order that cannot be filled immediately will be canceled.   * *FOK* (\"Fill-Or-Kill\") — an order must be executed immediately and completely or not executed at all.   * *Day* — keeps the order active until the end of the trading day (UTC).   * *GTD* (\"Good-Till-Date\") — an order will be canceled on the specified date. 
     * @type {string}
     * @memberof InlineResponse2003
     */
    timeInForce: InlineResponse2003TimeInForceEnum;
    /**
     * Order quantity.
     * @type {string}
     * @memberof InlineResponse2003
     */
    quantity: string;
    /**
     * Executed order quantity.
     * @type {string}
     * @memberof InlineResponse2003
     */
    quantityCumulative: string;
    /**
     * Order price.
     * @type {string}
     * @memberof InlineResponse2003
     */
    price?: string;
    /**
     * The price level that triggers order activation. Specified if `type` is `stopLimit`, `stopMarket`, `takeProfitLimit`, or `takeProfitMarket`.
     * @type {string}
     * @memberof InlineResponse2003
     */
    stopPrice?: string;
    /**
     * Date of order expiration. Specified if `time_in_force` is `GTD`.
     * @type {string}
     * @memberof InlineResponse2003
     */
    expireTime?: string;
    /**
     * A post-only order is an order that does not remove liquidity. If the post-only order would cause a match with a pre-existing order as a taker, then order will be canceled. 
     * @type {boolean}
     * @memberof InlineResponse2003
     */
    postOnly: boolean;
    /**
     * Date of order's creation.
     * @type {Date}
     * @memberof InlineResponse2003
     */
    createdAt: Date;
    /**
     * Date of order's last update.
     * @type {Date}
     * @memberof InlineResponse2003
     */
    updatedAt: Date;
    /**
     * 
     * @type {Array<SpotOrderTrades>}
     * @memberof InlineResponse2003
     */
    trades?: Array<SpotOrderTrades>;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003ContingencyTypeEnum {
    AllOrNone = 'allOrNone',
    OneCancelOther = 'oneCancelOther',
    OneTriggerOther = 'oneTriggerOther',
    OneTriggerOneCancelOther = 'oneTriggerOneCancelOther'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003SideEnum {
    Sell = 'sell',
    Buy = 'buy'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003StatusEnum {
    New = 'new',
    Suspended = 'suspended',
    PartiallyFilled = 'partiallyFilled',
    Filled = 'filled',
    Canceled = 'canceled',
    Expired = 'expired',
    Rejected = 'rejected'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003TypeEnum {
    Limit = 'limit',
    Market = 'market',
    StopLimit = 'stopLimit',
    StopMarket = 'stopMarket',
    TakeProfitLimit = 'takeProfitLimit',
    TakeProfitMarket = 'takeProfitMarket'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003TimeInForceEnum {
    GTC = 'GTC',
    IOC = 'IOC',
    FOK = 'FOK',
    Day = 'Day',
    GTD = 'GTD'
}

