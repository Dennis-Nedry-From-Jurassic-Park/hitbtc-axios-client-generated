/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Create API keys in your profile and use public API key as username and secret API key as password to authorize.
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HiddenSpotOrder, SpotOrder } from '../models';
import { HiddenSpotOrderHistory, SpotOrderHistory } from '../models';
import { HiddenSpotOrderRequest, SpotOrderRequest } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2003 } from '../models';
import { MarginBalance, SpotBalance } from '../models';
import { OrderListBody1 } from '../models';
import { SpotOrder } from '../models';
import { SpotOrderBody1 } from '../models';
import { SpotTradeHistory } from '../models';
import { TradingFee } from '../models';
/**
 * SpotTradingApi - axios parameter creator
 * @export
 */
export const SpotTradingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the user's trading balance per currency.
         * @summary Get spot trading balance for a currency.
         * @param {string} currency Currency code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotBalanceCurrencyGet: async (currency: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling spotBalanceCurrencyGet.');
            }
            const localVarPath = `/spot/balance/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the user's trading balance.
         * @summary Get spot trading balance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotBalanceGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spot/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns personal trading commission rates for all symbols.
         * @summary Get all trading commissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotFeeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spot/fee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns personal trading commission rate by symbol.
         * @summary Get trading commission for a symbol.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotFeeSymbolGet: async (symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling spotFeeSymbolGet.');
            }
            const localVarPath = `/spot/fee/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all spot orders with trades for the last 24 hours.
         * @summary Get the history of orders.
         * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
         * @param {string} [symbol] Symbol code.
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotHistoryOrderGet: async (clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spot/history/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (clientOrderId !== undefined) {
                localVarQueryParameter['client_order_id'] = clientOrderId;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the user's spot trading history.
         * @summary Spot trades history.
         * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {string} [by] The name of the field to order the results by.
         * @param {Date} [from] Timestamp of trade or trade identifier to list from.
         * @param {Date} [till] Timestamp of trade or trade identifier to list from.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotHistoryTradeGet: async (symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spot/history/trade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (symbol) {
                localVarQueryParameter['symbol'] = symbol.join(COLLECTION_FORMATS.csv);
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (by !== undefined) {
                localVarQueryParameter['by'] = by;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels a spot order.
         * @summary Cancel order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotOrderClientOrderIdDelete: async (clientOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientOrderId' is not null or undefined
            if (clientOrderId === null || clientOrderId === undefined) {
                throw new RequiredError('clientOrderId','Required parameter clientOrderId was null or undefined when calling spotOrderClientOrderIdDelete.');
            }
            const localVarPath = `/spot/order/{client_order_id}`
                .replace(`{${"client_order_id"}}`, encodeURIComponent(String(clientOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an active spot order by its client_order_id.
         * @summary Get active spot order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotOrderClientOrderIdGet: async (clientOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientOrderId' is not null or undefined
            if (clientOrderId === null || clientOrderId === undefined) {
                throw new RequiredError('clientOrderId','Required parameter clientOrderId was null or undefined when calling spotOrderClientOrderIdGet.');
            }
            const localVarPath = `/spot/order/{client_order_id}`
                .replace(`{${"client_order_id"}}`, encodeURIComponent(String(clientOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces a spot order.
         * @summary Replace spot order.
         * @param {string} quantity 
         * @param {string} price 
         * @param {string} newClientOrderId 
         * @param {boolean} strictValidate 
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotOrderClientOrderIdPatchForm: async (quantity: string, price: string, newClientOrderId: string, strictValidate: boolean, clientOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new RequiredError('quantity','Required parameter quantity was null or undefined when calling spotOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'price' is not null or undefined
            if (price === null || price === undefined) {
                throw new RequiredError('price','Required parameter price was null or undefined when calling spotOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'newClientOrderId' is not null or undefined
            if (newClientOrderId === null || newClientOrderId === undefined) {
                throw new RequiredError('newClientOrderId','Required parameter newClientOrderId was null or undefined when calling spotOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'strictValidate' is not null or undefined
            if (strictValidate === null || strictValidate === undefined) {
                throw new RequiredError('strictValidate','Required parameter strictValidate was null or undefined when calling spotOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'clientOrderId' is not null or undefined
            if (clientOrderId === null || clientOrderId === undefined) {
                throw new RequiredError('clientOrderId','Required parameter clientOrderId was null or undefined when calling spotOrderClientOrderIdPatchForm.');
            }
            const localVarPath = `/spot/order/{client_order_id}`
                .replace(`{${"client_order_id"}}`, encodeURIComponent(String(clientOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }

            if (price !== undefined) { 
                localVarFormParams.set('price', price as any);
            }

            if (newClientOrderId !== undefined) { 
                localVarFormParams.set('new_client_order_id', newClientOrderId as any);
            }

            if (strictValidate !== undefined) { 
                localVarFormParams.set('strict_validate', strictValidate as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels all active spot orders.
         * @summary Cancel all spot orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotOrderDelete: async (symbol?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spot/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all active spot orders.
         * @summary Get all active spot orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotOrderGet: async (symbol?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spot/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new spot order list.
         * @summary Create a new spot order list.
         * @param {string} [orderListId] 
         * @param {string} [contingencyType] 
         * @param {Array<HiddenSpotOrderRequest & SpotOrderRequest>} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotOrderListPostForm: async (orderListId?: string, contingencyType?: string, orders?: Array<HiddenSpotOrderRequest & SpotOrderRequest>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spot/order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (orderListId !== undefined) { 
                localVarFormParams.set('order_list_id', orderListId as any);
            }

            if (contingencyType !== undefined) { 
                localVarFormParams.set('contingency_type', contingencyType as any);
            }
            if (orders) {
                orders.forEach((element) => {
                    localVarFormParams.append('orders', element as any);
                })
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new spot order list.
         * @summary Create a new spot order list.
         * @param {OrderListBody1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotOrderListPost: async (body?: OrderListBody1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spot/order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new spot order.
         * @summary Create a new spot order.
         * @param {SpotOrderBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        spotOrderPost: async (body: SpotOrderBody1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling spotOrderPost.');
            }
            const localVarPath = `/spot/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpotTradingApi - functional programming interface
 * @export
 */
export const SpotTradingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the user's trading balance per currency.
         * @summary Get spot trading balance for a currency.
         * @param {string} currency Currency code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotBalanceCurrencyGet(currency: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotBalanceCurrencyGet(currency, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the user's trading balance.
         * @summary Get spot trading balance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotBalanceGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MarginBalance & SpotBalance>>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotBalanceGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns personal trading commission rates for all symbols.
         * @summary Get all trading commissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotFeeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TradingFee>>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotFeeGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns personal trading commission rate by symbol.
         * @summary Get trading commission for a symbol.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotFeeSymbolGet(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TradingFee>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotFeeSymbolGet(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all spot orders with trades for the last 24 hours.
         * @summary Get the history of orders.
         * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
         * @param {string} [symbol] Symbol code.
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotHistoryOrderGet(clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenSpotOrderHistory & SpotOrderHistory>>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotHistoryOrderGet(clientOrderId, symbol, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the user's spot trading history.
         * @summary Spot trades history.
         * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {string} [by] The name of the field to order the results by.
         * @param {Date} [from] Timestamp of trade or trade identifier to list from.
         * @param {Date} [till] Timestamp of trade or trade identifier to list from.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotHistoryTradeGet(symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SpotTradeHistory>>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotHistoryTradeGet(symbol, sort, by, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancels a spot order.
         * @summary Cancel order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderClientOrderIdDelete(clientOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SpotOrder>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotOrderClientOrderIdDelete(clientOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an active spot order by its client_order_id.
         * @summary Get active spot order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderClientOrderIdGet(clientOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotOrderClientOrderIdGet(clientOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces a spot order.
         * @summary Replace spot order.
         * @param {string} quantity 
         * @param {string} price 
         * @param {string} newClientOrderId 
         * @param {boolean} strictValidate 
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderClientOrderIdPatchForm(quantity: string, price: string, newClientOrderId: string, strictValidate: boolean, clientOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SpotOrder>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotOrderClientOrderIdPatchForm(quantity, price, newClientOrderId, strictValidate, clientOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancels all active spot orders.
         * @summary Cancel all spot orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderDelete(symbol?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SpotOrder>>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotOrderDelete(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of all active spot orders.
         * @summary Get all active spot orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderGet(symbol?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenSpotOrder & SpotOrder>>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotOrderGet(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new spot order list.
         * @summary Create a new spot order list.
         * @param {string} [orderListId] 
         * @param {string} [contingencyType] 
         * @param {Array<HiddenSpotOrderRequest & SpotOrderRequest>} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderListPostForm(orderListId?: string, contingencyType?: string, orders?: Array<HiddenSpotOrderRequest & SpotOrderRequest>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenSpotOrder & SpotOrder>>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotOrderListPostForm(orderListId, contingencyType, orders, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new spot order list.
         * @summary Create a new spot order list.
         * @param {OrderListBody1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderListPost(body?: OrderListBody1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenSpotOrder & SpotOrder>>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotOrderListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new spot order.
         * @summary Create a new spot order.
         * @param {SpotOrderBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderPost(body: SpotOrderBody1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await SpotTradingApiAxiosParamCreator(configuration).spotOrderPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SpotTradingApi - factory interface
 * @export
 */
export const SpotTradingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the user's trading balance per currency.
         * @summary Get spot trading balance for a currency.
         * @param {string} currency Currency code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotBalanceCurrencyGet(currency: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return SpotTradingApiFp(configuration).spotBalanceCurrencyGet(currency, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the user's trading balance.
         * @summary Get spot trading balance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotBalanceGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MarginBalance & SpotBalance>>> {
            return SpotTradingApiFp(configuration).spotBalanceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns personal trading commission rates for all symbols.
         * @summary Get all trading commissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotFeeGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TradingFee>>> {
            return SpotTradingApiFp(configuration).spotFeeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns personal trading commission rate by symbol.
         * @summary Get trading commission for a symbol.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotFeeSymbolGet(symbol: string, options?: AxiosRequestConfig): Promise<AxiosResponse<TradingFee>> {
            return SpotTradingApiFp(configuration).spotFeeSymbolGet(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all spot orders with trades for the last 24 hours.
         * @summary Get the history of orders.
         * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
         * @param {string} [symbol] Symbol code.
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotHistoryOrderGet(clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenSpotOrderHistory & SpotOrderHistory>>> {
            return SpotTradingApiFp(configuration).spotHistoryOrderGet(clientOrderId, symbol, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the user's spot trading history.
         * @summary Spot trades history.
         * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {string} [by] The name of the field to order the results by.
         * @param {Date} [from] Timestamp of trade or trade identifier to list from.
         * @param {Date} [till] Timestamp of trade or trade identifier to list from.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotHistoryTradeGet(symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SpotTradeHistory>>> {
            return SpotTradingApiFp(configuration).spotHistoryTradeGet(symbol, sort, by, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels a spot order.
         * @summary Cancel order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderClientOrderIdDelete(clientOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SpotOrder>> {
            return SpotTradingApiFp(configuration).spotOrderClientOrderIdDelete(clientOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an active spot order by its client_order_id.
         * @summary Get active spot order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderClientOrderIdGet(clientOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return SpotTradingApiFp(configuration).spotOrderClientOrderIdGet(clientOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces a spot order.
         * @summary Replace spot order.
         * @param {string} quantity 
         * @param {string} price 
         * @param {string} newClientOrderId 
         * @param {boolean} strictValidate 
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderClientOrderIdPatchForm(quantity: string, price: string, newClientOrderId: string, strictValidate: boolean, clientOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SpotOrder>> {
            return SpotTradingApiFp(configuration).spotOrderClientOrderIdPatchForm(quantity, price, newClientOrderId, strictValidate, clientOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels all active spot orders.
         * @summary Cancel all spot orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderDelete(symbol?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SpotOrder>>> {
            return SpotTradingApiFp(configuration).spotOrderDelete(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all active spot orders.
         * @summary Get all active spot orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderGet(symbol?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenSpotOrder & SpotOrder>>> {
            return SpotTradingApiFp(configuration).spotOrderGet(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new spot order list.
         * @summary Create a new spot order list.
         * @param {string} [orderListId] 
         * @param {string} [contingencyType] 
         * @param {Array<HiddenSpotOrderRequest & SpotOrderRequest>} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderListPostForm(orderListId?: string, contingencyType?: string, orders?: Array<HiddenSpotOrderRequest & SpotOrderRequest>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenSpotOrder & SpotOrder>>> {
            return SpotTradingApiFp(configuration).spotOrderListPostForm(orderListId, contingencyType, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new spot order list.
         * @summary Create a new spot order list.
         * @param {OrderListBody1} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderListPost(body?: OrderListBody1, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenSpotOrder & SpotOrder>>> {
            return SpotTradingApiFp(configuration).spotOrderListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new spot order.
         * @summary Create a new spot order.
         * @param {SpotOrderBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async spotOrderPost(body: SpotOrderBody1, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return SpotTradingApiFp(configuration).spotOrderPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpotTradingApi - object-oriented interface
 * @export
 * @class SpotTradingApi
 * @extends {BaseAPI}
 */
export class SpotTradingApi extends BaseAPI {
    /**
     * Returns the user's trading balance per currency.
     * @summary Get spot trading balance for a currency.
     * @param {string} currency Currency code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotBalanceCurrencyGet(currency: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return SpotTradingApiFp(this.configuration).spotBalanceCurrencyGet(currency, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the user's trading balance.
     * @summary Get spot trading balance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotBalanceGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MarginBalance & SpotBalance>>> {
        return SpotTradingApiFp(this.configuration).spotBalanceGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns personal trading commission rates for all symbols.
     * @summary Get all trading commissions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotFeeGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TradingFee>>> {
        return SpotTradingApiFp(this.configuration).spotFeeGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns personal trading commission rate by symbol.
     * @summary Get trading commission for a symbol.
     * @param {string} symbol Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotFeeSymbolGet(symbol: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<TradingFee>> {
        return SpotTradingApiFp(this.configuration).spotFeeSymbolGet(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all spot orders with trades for the last 24 hours.
     * @summary Get the history of orders.
     * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
     * @param {string} [symbol] Symbol code.
     * @param {Date} [from] Interval initial value.
     * @param {Date} [till] Interval end value.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotHistoryOrderGet(clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenSpotOrderHistory & SpotOrderHistory>>> {
        return SpotTradingApiFp(this.configuration).spotHistoryOrderGet(clientOrderId, symbol, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the user's spot trading history.
     * @summary Spot trades history.
     * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
     * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
     * @param {string} [by] The name of the field to order the results by.
     * @param {Date} [from] Timestamp of trade or trade identifier to list from.
     * @param {Date} [till] Timestamp of trade or trade identifier to list from.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotHistoryTradeGet(symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SpotTradeHistory>>> {
        return SpotTradingApiFp(this.configuration).spotHistoryTradeGet(symbol, sort, by, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancels a spot order.
     * @summary Cancel order.
     * @param {string} clientOrderId Unique order identifier given by a trader or the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotOrderClientOrderIdDelete(clientOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SpotOrder>> {
        return SpotTradingApiFp(this.configuration).spotOrderClientOrderIdDelete(clientOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an active spot order by its client_order_id.
     * @summary Get active spot order.
     * @param {string} clientOrderId Unique order identifier given by a trader or the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotOrderClientOrderIdGet(clientOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return SpotTradingApiFp(this.configuration).spotOrderClientOrderIdGet(clientOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces a spot order.
     * @summary Replace spot order.
     * @param {string} quantity 
     * @param {string} price 
     * @param {string} newClientOrderId 
     * @param {boolean} strictValidate 
     * @param {string} clientOrderId Unique order identifier given by a trader or the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotOrderClientOrderIdPatchForm(quantity: string, price: string, newClientOrderId: string, strictValidate: boolean, clientOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SpotOrder>> {
        return SpotTradingApiFp(this.configuration).spotOrderClientOrderIdPatchForm(quantity, price, newClientOrderId, strictValidate, clientOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancels all active spot orders.
     * @summary Cancel all spot orders.
     * @param {string} [symbol] Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotOrderDelete(symbol?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SpotOrder>>> {
        return SpotTradingApiFp(this.configuration).spotOrderDelete(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all active spot orders.
     * @summary Get all active spot orders.
     * @param {string} [symbol] Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotOrderGet(symbol?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenSpotOrder & SpotOrder>>> {
        return SpotTradingApiFp(this.configuration).spotOrderGet(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new spot order list.
     * @summary Create a new spot order list.
     * @param {string} [orderListId] 
     * @param {string} [contingencyType] 
     * @param {Array<HiddenSpotOrderRequest & SpotOrderRequest>} [orders] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotOrderListPostForm(orderListId?: string, contingencyType?: string, orders?: Array<HiddenSpotOrderRequest & SpotOrderRequest>, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenSpotOrder & SpotOrder>>> {
        return SpotTradingApiFp(this.configuration).spotOrderListPostForm(orderListId, contingencyType, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new spot order list.
     * @summary Create a new spot order list.
     * @param {OrderListBody1} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotOrderListPost(body?: OrderListBody1, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenSpotOrder & SpotOrder>>> {
        return SpotTradingApiFp(this.configuration).spotOrderListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new spot order.
     * @summary Create a new spot order.
     * @param {SpotOrderBody1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotTradingApi
     */
    public async spotOrderPost(body: SpotOrderBody1, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return SpotTradingApiFp(this.configuration).spotOrderPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
