/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Create API keys in your profile and use public API key as username and secret API key as password to authorize.
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HiddenMarginOrder, MarginOrder } from '../models';
import { HiddenMarginOrderHistory, MarginOrderHistory } from '../models';
import { HiddenMarginOrderRequest, MarginOrderRequest } from '../models';
import { InlineResponse2004 } from '../models';
import { InlineResponse2005 } from '../models';
import { IsolatedSymbolBody1 } from '../models';
import { MarginAccount } from '../models';
import { MarginClearing } from '../models';
import { MarginOrder } from '../models';
import { MarginOrderBody1 } from '../models';
import { MarginPosition } from '../models';
import { MarginPositionHistory } from '../models';
import { MarginTradeHistory } from '../models';
import { OrderListBody3 } from '../models';
/**
 * MarginTradingApi - axios parameter creator
 * @export
 */
export const MarginTradingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns user's all margin accounts' details.
         * @summary Get all margin accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginAccountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns isolated margin account details by symbol.
         * @summary Get a margin account.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginAccountIsolatedSymbolGet: async (symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling marginAccountIsolatedSymbolGet.');
            }
            const localVarPath = `/margin/account/isolated/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the created/updated margin account details.
         * @summary Create/update a margin account.
         * @param {string} marginBalance 
         * @param {boolean} strictValidate 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginAccountIsolatedSymbolPutForm: async (marginBalance: string, strictValidate: boolean, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marginBalance' is not null or undefined
            if (marginBalance === null || marginBalance === undefined) {
                throw new RequiredError('marginBalance','Required parameter marginBalance was null or undefined when calling marginAccountIsolatedSymbolPutForm.');
            }
            // verify required parameter 'strictValidate' is not null or undefined
            if (strictValidate === null || strictValidate === undefined) {
                throw new RequiredError('strictValidate','Required parameter strictValidate was null or undefined when calling marginAccountIsolatedSymbolPutForm.');
            }
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling marginAccountIsolatedSymbolPutForm.');
            }
            const localVarPath = `/margin/account/isolated/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (marginBalance !== undefined) { 
                localVarFormParams.set('margin_balance', marginBalance as any);
            }

            if (strictValidate !== undefined) { 
                localVarFormParams.set('strict_validate', strictValidate as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the created/updated margin account details.
         * @summary Create/update a margin account.
         * @param {IsolatedSymbolBody1} body 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginAccountIsolatedSymbolPut: async (body: IsolatedSymbolBody1, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling marginAccountIsolatedSymbolPut.');
            }
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling marginAccountIsolatedSymbolPut.');
            }
            const localVarPath = `/margin/account/isolated/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about margin position configuration.
         * @summary Get margin position parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginConfigGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns clearing details.
         * @summary Clearing details.
         * @param {string} [currency] Currency code.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginHistoryClearingGet: async (currency?: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/history/clearing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all margin orders with trades for the last 24 hours.
         * @summary Margin orders history.
         * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
         * @param {string} [symbol] Symbol code.
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginHistoryOrderGet: async (clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/history/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (clientOrderId !== undefined) {
                localVarQueryParameter['client_order_id'] = clientOrderId;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns margin positions history.
         * @summary Margin positions history.
         * @param {string} by The name of the field to order the results by.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginHistoryPositionsGet: async (by: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'by' is not null or undefined
            if (by === null || by === undefined) {
                throw new RequiredError('by','Required parameter by was null or undefined when calling marginHistoryPositionsGet.');
            }
            const localVarPath = `/margin/history/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (by !== undefined) {
                localVarQueryParameter['by'] = by;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the user's margin trading history.
         * @summary Margin trades history.
         * @param {number} [orderId] Order identifier.
         * @param {number} [positionId] Position identifier of the taker&#x27;s order in the trade.
         * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {string} [by] The name of the field to order the results by.
         * @param {Date} [from] Timestamp of trade or trade identifier to list from.
         * @param {Date} [till] Timestamp of trade or trade identifier to list from.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginHistoryTradeGet: async (orderId?: number, positionId?: number, symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/history/trade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['position_id'] = positionId;
            }

            if (symbol) {
                localVarQueryParameter['symbol'] = symbol.join(COLLECTION_FORMATS.csv);
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (by !== undefined) {
                localVarQueryParameter['by'] = by;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels a margin order.
         * @summary Cancel order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginOrderClientOrderIdDelete: async (clientOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientOrderId' is not null or undefined
            if (clientOrderId === null || clientOrderId === undefined) {
                throw new RequiredError('clientOrderId','Required parameter clientOrderId was null or undefined when calling marginOrderClientOrderIdDelete.');
            }
            const localVarPath = `/margin/order/{client_order_id}`
                .replace(`{${"client_order_id"}}`, encodeURIComponent(String(clientOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an active margin order by 'client_order_id'.
         * @summary Get active margin order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginOrderClientOrderIdGet: async (clientOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientOrderId' is not null or undefined
            if (clientOrderId === null || clientOrderId === undefined) {
                throw new RequiredError('clientOrderId','Required parameter clientOrderId was null or undefined when calling marginOrderClientOrderIdGet.');
            }
            const localVarPath = `/margin/order/{client_order_id}`
                .replace(`{${"client_order_id"}}`, encodeURIComponent(String(clientOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces a margin order.
         * @summary Replace margin order.
         * @param {string} quantity 
         * @param {string} price 
         * @param {string} newClientOrderId 
         * @param {boolean} strictValidate 
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginOrderClientOrderIdPatchForm: async (quantity: string, price: string, newClientOrderId: string, strictValidate: boolean, clientOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new RequiredError('quantity','Required parameter quantity was null or undefined when calling marginOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'price' is not null or undefined
            if (price === null || price === undefined) {
                throw new RequiredError('price','Required parameter price was null or undefined when calling marginOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'newClientOrderId' is not null or undefined
            if (newClientOrderId === null || newClientOrderId === undefined) {
                throw new RequiredError('newClientOrderId','Required parameter newClientOrderId was null or undefined when calling marginOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'strictValidate' is not null or undefined
            if (strictValidate === null || strictValidate === undefined) {
                throw new RequiredError('strictValidate','Required parameter strictValidate was null or undefined when calling marginOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'clientOrderId' is not null or undefined
            if (clientOrderId === null || clientOrderId === undefined) {
                throw new RequiredError('clientOrderId','Required parameter clientOrderId was null or undefined when calling marginOrderClientOrderIdPatchForm.');
            }
            const localVarPath = `/margin/order/{client_order_id}`
                .replace(`{${"client_order_id"}}`, encodeURIComponent(String(clientOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }

            if (price !== undefined) { 
                localVarFormParams.set('price', price as any);
            }

            if (newClientOrderId !== undefined) { 
                localVarFormParams.set('new_client_order_id', newClientOrderId as any);
            }

            if (strictValidate !== undefined) { 
                localVarFormParams.set('strict_validate', strictValidate as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels all active margin orders.
         * @summary Cancel all margin orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginOrderDelete: async (symbol?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all active margin orders.
         * @summary Get active margin orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginOrderGet: async (symbol?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new margin order list.
         * @summary Create a new margin order list.
         * @param {string} [orderListId] 
         * @param {string} [contingencyType] 
         * @param {Array<HiddenMarginOrderRequest & MarginOrderRequest>} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginOrderListPostForm: async (orderListId?: string, contingencyType?: string, orders?: Array<HiddenMarginOrderRequest & MarginOrderRequest>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (orderListId !== undefined) { 
                localVarFormParams.set('order_list_id', orderListId as any);
            }

            if (contingencyType !== undefined) { 
                localVarFormParams.set('contingency_type', contingencyType as any);
            }
            if (orders) {
                orders.forEach((element) => {
                    localVarFormParams.append('orders', element as any);
                })
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new margin order list.
         * @summary Create a new margin order list.
         * @param {OrderListBody3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginOrderListPost: async (body?: OrderListBody3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new margin order.
         * @summary Create a new margin order.
         * @param {MarginOrderBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginOrderPost: async (body: MarginOrderBody1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling marginOrderPost.');
            }
            const localVarPath = `/margin/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Closes all open positions.
         * @summary Close margin positions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginPositionDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/margin/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Closes open positions by symbol.
         * @summary Close margin position.
         * @param {string} symbol Symbol code.
         * @param {boolean} [strictValidate] Price and quantity will be checked for incrementation within the symbol&#x27;s tick size and quantity step. See the symbol&#x27;s &#x60;tick_size&#x60; and &#x60;quantity_increment&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginPositionIsolatedSymbolDelete: async (symbol: string, strictValidate?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling marginPositionIsolatedSymbolDelete.');
            }
            const localVarPath = `/margin/position/isolated/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (strictValidate !== undefined) {
                localVarQueryParameter['strict_validate'] = strictValidate;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarginTradingApi - functional programming interface
 * @export
 */
export const MarginTradingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns user's all margin accounts' details.
         * @summary Get all margin accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginAccountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MarginAccount>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginAccountGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns isolated margin account details by symbol.
         * @summary Get a margin account.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginAccountIsolatedSymbolGet(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MarginAccount>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginAccountIsolatedSymbolGet(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the created/updated margin account details.
         * @summary Create/update a margin account.
         * @param {string} marginBalance 
         * @param {boolean} strictValidate 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginAccountIsolatedSymbolPutForm(marginBalance: string, strictValidate: boolean, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MarginAccount>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginAccountIsolatedSymbolPutForm(marginBalance, strictValidate, symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the created/updated margin account details.
         * @summary Create/update a margin account.
         * @param {IsolatedSymbolBody1} body 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginAccountIsolatedSymbolPut(body: IsolatedSymbolBody1, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MarginAccount>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginAccountIsolatedSymbolPut(body, symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns information about margin position configuration.
         * @summary Get margin position parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginConfigGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2005>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginConfigGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns clearing details.
         * @summary Clearing details.
         * @param {string} [currency] Currency code.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginHistoryClearingGet(currency?: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MarginClearing>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginHistoryClearingGet(currency, sort, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all margin orders with trades for the last 24 hours.
         * @summary Margin orders history.
         * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
         * @param {string} [symbol] Symbol code.
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginHistoryOrderGet(clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenMarginOrderHistory & MarginOrderHistory>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginHistoryOrderGet(clientOrderId, symbol, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns margin positions history.
         * @summary Margin positions history.
         * @param {string} by The name of the field to order the results by.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginHistoryPositionsGet(by: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MarginPositionHistory>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginHistoryPositionsGet(by, sort, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the user's margin trading history.
         * @summary Margin trades history.
         * @param {number} [orderId] Order identifier.
         * @param {number} [positionId] Position identifier of the taker&#x27;s order in the trade.
         * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {string} [by] The name of the field to order the results by.
         * @param {Date} [from] Timestamp of trade or trade identifier to list from.
         * @param {Date} [till] Timestamp of trade or trade identifier to list from.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginHistoryTradeGet(orderId?: number, positionId?: number, symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MarginTradeHistory>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginHistoryTradeGet(orderId, positionId, symbol, sort, by, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancels a margin order.
         * @summary Cancel order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderClientOrderIdDelete(clientOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MarginOrder>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginOrderClientOrderIdDelete(clientOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an active margin order by 'client_order_id'.
         * @summary Get active margin order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderClientOrderIdGet(clientOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginOrderClientOrderIdGet(clientOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces a margin order.
         * @summary Replace margin order.
         * @param {string} quantity 
         * @param {string} price 
         * @param {string} newClientOrderId 
         * @param {boolean} strictValidate 
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderClientOrderIdPatchForm(quantity: string, price: string, newClientOrderId: string, strictValidate: boolean, clientOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MarginOrder>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginOrderClientOrderIdPatchForm(quantity, price, newClientOrderId, strictValidate, clientOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancels all active margin orders.
         * @summary Cancel all margin orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderDelete(symbol?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MarginOrder>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginOrderDelete(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of all active margin orders.
         * @summary Get active margin orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderGet(symbol?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginOrderGet(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new margin order list.
         * @summary Create a new margin order list.
         * @param {string} [orderListId] 
         * @param {string} [contingencyType] 
         * @param {Array<HiddenMarginOrderRequest & MarginOrderRequest>} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderListPostForm(orderListId?: string, contingencyType?: string, orders?: Array<HiddenMarginOrderRequest & MarginOrderRequest>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenMarginOrder & MarginOrder>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginOrderListPostForm(orderListId, contingencyType, orders, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new margin order list.
         * @summary Create a new margin order list.
         * @param {OrderListBody3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderListPost(body?: OrderListBody3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenMarginOrder & MarginOrder>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginOrderListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new margin order.
         * @summary Create a new margin order.
         * @param {MarginOrderBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderPost(body: MarginOrderBody1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginOrderPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Closes all open positions.
         * @summary Close margin positions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginPositionDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MarginPosition>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginPositionDelete(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Closes open positions by symbol.
         * @summary Close margin position.
         * @param {string} symbol Symbol code.
         * @param {boolean} [strictValidate] Price and quantity will be checked for incrementation within the symbol&#x27;s tick size and quantity step. See the symbol&#x27;s &#x60;tick_size&#x60; and &#x60;quantity_increment&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginPositionIsolatedSymbolDelete(symbol: string, strictValidate?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MarginPosition>>>> {
            const localVarAxiosArgs = await MarginTradingApiAxiosParamCreator(configuration).marginPositionIsolatedSymbolDelete(symbol, strictValidate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MarginTradingApi - factory interface
 * @export
 */
export const MarginTradingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns user's all margin accounts' details.
         * @summary Get all margin accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginAccountGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MarginAccount>>> {
            return MarginTradingApiFp(configuration).marginAccountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns isolated margin account details by symbol.
         * @summary Get a margin account.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginAccountIsolatedSymbolGet(symbol: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MarginAccount>> {
            return MarginTradingApiFp(configuration).marginAccountIsolatedSymbolGet(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the created/updated margin account details.
         * @summary Create/update a margin account.
         * @param {string} marginBalance 
         * @param {boolean} strictValidate 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginAccountIsolatedSymbolPutForm(marginBalance: string, strictValidate: boolean, symbol: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MarginAccount>> {
            return MarginTradingApiFp(configuration).marginAccountIsolatedSymbolPutForm(marginBalance, strictValidate, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the created/updated margin account details.
         * @summary Create/update a margin account.
         * @param {IsolatedSymbolBody1} body 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginAccountIsolatedSymbolPut(body: IsolatedSymbolBody1, symbol: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MarginAccount>> {
            return MarginTradingApiFp(configuration).marginAccountIsolatedSymbolPut(body, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about margin position configuration.
         * @summary Get margin position parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginConfigGet(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2005>> {
            return MarginTradingApiFp(configuration).marginConfigGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns clearing details.
         * @summary Clearing details.
         * @param {string} [currency] Currency code.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginHistoryClearingGet(currency?: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MarginClearing>>> {
            return MarginTradingApiFp(configuration).marginHistoryClearingGet(currency, sort, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all margin orders with trades for the last 24 hours.
         * @summary Margin orders history.
         * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
         * @param {string} [symbol] Symbol code.
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginHistoryOrderGet(clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenMarginOrderHistory & MarginOrderHistory>>> {
            return MarginTradingApiFp(configuration).marginHistoryOrderGet(clientOrderId, symbol, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns margin positions history.
         * @summary Margin positions history.
         * @param {string} by The name of the field to order the results by.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginHistoryPositionsGet(by: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MarginPositionHistory>>> {
            return MarginTradingApiFp(configuration).marginHistoryPositionsGet(by, sort, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the user's margin trading history.
         * @summary Margin trades history.
         * @param {number} [orderId] Order identifier.
         * @param {number} [positionId] Position identifier of the taker&#x27;s order in the trade.
         * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {string} [by] The name of the field to order the results by.
         * @param {Date} [from] Timestamp of trade or trade identifier to list from.
         * @param {Date} [till] Timestamp of trade or trade identifier to list from.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginHistoryTradeGet(orderId?: number, positionId?: number, symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MarginTradeHistory>>> {
            return MarginTradingApiFp(configuration).marginHistoryTradeGet(orderId, positionId, symbol, sort, by, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels a margin order.
         * @summary Cancel order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderClientOrderIdDelete(clientOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MarginOrder>> {
            return MarginTradingApiFp(configuration).marginOrderClientOrderIdDelete(clientOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an active margin order by 'client_order_id'.
         * @summary Get active margin order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderClientOrderIdGet(clientOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return MarginTradingApiFp(configuration).marginOrderClientOrderIdGet(clientOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces a margin order.
         * @summary Replace margin order.
         * @param {string} quantity 
         * @param {string} price 
         * @param {string} newClientOrderId 
         * @param {boolean} strictValidate 
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderClientOrderIdPatchForm(quantity: string, price: string, newClientOrderId: string, strictValidate: boolean, clientOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MarginOrder>> {
            return MarginTradingApiFp(configuration).marginOrderClientOrderIdPatchForm(quantity, price, newClientOrderId, strictValidate, clientOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels all active margin orders.
         * @summary Cancel all margin orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderDelete(symbol?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MarginOrder>>> {
            return MarginTradingApiFp(configuration).marginOrderDelete(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all active margin orders.
         * @summary Get active margin orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderGet(symbol?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return MarginTradingApiFp(configuration).marginOrderGet(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new margin order list.
         * @summary Create a new margin order list.
         * @param {string} [orderListId] 
         * @param {string} [contingencyType] 
         * @param {Array<HiddenMarginOrderRequest & MarginOrderRequest>} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderListPostForm(orderListId?: string, contingencyType?: string, orders?: Array<HiddenMarginOrderRequest & MarginOrderRequest>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenMarginOrder & MarginOrder>>> {
            return MarginTradingApiFp(configuration).marginOrderListPostForm(orderListId, contingencyType, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new margin order list.
         * @summary Create a new margin order list.
         * @param {OrderListBody3} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderListPost(body?: OrderListBody3, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenMarginOrder & MarginOrder>>> {
            return MarginTradingApiFp(configuration).marginOrderListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new margin order.
         * @summary Create a new margin order.
         * @param {MarginOrderBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginOrderPost(body: MarginOrderBody1, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return MarginTradingApiFp(configuration).marginOrderPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Closes all open positions.
         * @summary Close margin positions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginPositionDelete(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MarginPosition>>> {
            return MarginTradingApiFp(configuration).marginPositionDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Closes open positions by symbol.
         * @summary Close margin position.
         * @param {string} symbol Symbol code.
         * @param {boolean} [strictValidate] Price and quantity will be checked for incrementation within the symbol&#x27;s tick size and quantity step. See the symbol&#x27;s &#x60;tick_size&#x60; and &#x60;quantity_increment&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginPositionIsolatedSymbolDelete(symbol: string, strictValidate?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MarginPosition>>> {
            return MarginTradingApiFp(configuration).marginPositionIsolatedSymbolDelete(symbol, strictValidate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarginTradingApi - object-oriented interface
 * @export
 * @class MarginTradingApi
 * @extends {BaseAPI}
 */
export class MarginTradingApi extends BaseAPI {
    /**
     * Returns user's all margin accounts' details.
     * @summary Get all margin accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginAccountGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MarginAccount>>> {
        return MarginTradingApiFp(this.configuration).marginAccountGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns isolated margin account details by symbol.
     * @summary Get a margin account.
     * @param {string} symbol Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginAccountIsolatedSymbolGet(symbol: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MarginAccount>> {
        return MarginTradingApiFp(this.configuration).marginAccountIsolatedSymbolGet(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the created/updated margin account details.
     * @summary Create/update a margin account.
     * @param {string} marginBalance 
     * @param {boolean} strictValidate 
     * @param {string} symbol Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginAccountIsolatedSymbolPutForm(marginBalance: string, strictValidate: boolean, symbol: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MarginAccount>> {
        return MarginTradingApiFp(this.configuration).marginAccountIsolatedSymbolPutForm(marginBalance, strictValidate, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the created/updated margin account details.
     * @summary Create/update a margin account.
     * @param {IsolatedSymbolBody1} body 
     * @param {string} symbol Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginAccountIsolatedSymbolPut(body: IsolatedSymbolBody1, symbol: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MarginAccount>> {
        return MarginTradingApiFp(this.configuration).marginAccountIsolatedSymbolPut(body, symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns information about margin position configuration.
     * @summary Get margin position parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginConfigGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2005>> {
        return MarginTradingApiFp(this.configuration).marginConfigGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns clearing details.
     * @summary Clearing details.
     * @param {string} [currency] Currency code.
     * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
     * @param {Date} [from] Interval initial value.
     * @param {Date} [till] Interval end value.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginHistoryClearingGet(currency?: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MarginClearing>>> {
        return MarginTradingApiFp(this.configuration).marginHistoryClearingGet(currency, sort, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all margin orders with trades for the last 24 hours.
     * @summary Margin orders history.
     * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
     * @param {string} [symbol] Symbol code.
     * @param {Date} [from] Interval initial value.
     * @param {Date} [till] Interval end value.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginHistoryOrderGet(clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenMarginOrderHistory & MarginOrderHistory>>> {
        return MarginTradingApiFp(this.configuration).marginHistoryOrderGet(clientOrderId, symbol, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns margin positions history.
     * @summary Margin positions history.
     * @param {string} by The name of the field to order the results by.
     * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
     * @param {Date} [from] Interval initial value.
     * @param {Date} [till] Interval end value.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginHistoryPositionsGet(by: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MarginPositionHistory>>> {
        return MarginTradingApiFp(this.configuration).marginHistoryPositionsGet(by, sort, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the user's margin trading history.
     * @summary Margin trades history.
     * @param {number} [orderId] Order identifier.
     * @param {number} [positionId] Position identifier of the taker&#x27;s order in the trade.
     * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
     * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
     * @param {string} [by] The name of the field to order the results by.
     * @param {Date} [from] Timestamp of trade or trade identifier to list from.
     * @param {Date} [till] Timestamp of trade or trade identifier to list from.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginHistoryTradeGet(orderId?: number, positionId?: number, symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MarginTradeHistory>>> {
        return MarginTradingApiFp(this.configuration).marginHistoryTradeGet(orderId, positionId, symbol, sort, by, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancels a margin order.
     * @summary Cancel order.
     * @param {string} clientOrderId Unique order identifier given by a trader or the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginOrderClientOrderIdDelete(clientOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MarginOrder>> {
        return MarginTradingApiFp(this.configuration).marginOrderClientOrderIdDelete(clientOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an active margin order by 'client_order_id'.
     * @summary Get active margin order.
     * @param {string} clientOrderId Unique order identifier given by a trader or the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginOrderClientOrderIdGet(clientOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return MarginTradingApiFp(this.configuration).marginOrderClientOrderIdGet(clientOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces a margin order.
     * @summary Replace margin order.
     * @param {string} quantity 
     * @param {string} price 
     * @param {string} newClientOrderId 
     * @param {boolean} strictValidate 
     * @param {string} clientOrderId Unique order identifier given by a trader or the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginOrderClientOrderIdPatchForm(quantity: string, price: string, newClientOrderId: string, strictValidate: boolean, clientOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MarginOrder>> {
        return MarginTradingApiFp(this.configuration).marginOrderClientOrderIdPatchForm(quantity, price, newClientOrderId, strictValidate, clientOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancels all active margin orders.
     * @summary Cancel all margin orders.
     * @param {string} [symbol] Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginOrderDelete(symbol?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MarginOrder>>> {
        return MarginTradingApiFp(this.configuration).marginOrderDelete(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all active margin orders.
     * @summary Get active margin orders.
     * @param {string} [symbol] Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginOrderGet(symbol?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return MarginTradingApiFp(this.configuration).marginOrderGet(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new margin order list.
     * @summary Create a new margin order list.
     * @param {string} [orderListId] 
     * @param {string} [contingencyType] 
     * @param {Array<HiddenMarginOrderRequest & MarginOrderRequest>} [orders] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginOrderListPostForm(orderListId?: string, contingencyType?: string, orders?: Array<HiddenMarginOrderRequest & MarginOrderRequest>, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenMarginOrder & MarginOrder>>> {
        return MarginTradingApiFp(this.configuration).marginOrderListPostForm(orderListId, contingencyType, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new margin order list.
     * @summary Create a new margin order list.
     * @param {OrderListBody3} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginOrderListPost(body?: OrderListBody3, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenMarginOrder & MarginOrder>>> {
        return MarginTradingApiFp(this.configuration).marginOrderListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new margin order.
     * @summary Create a new margin order.
     * @param {MarginOrderBody1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginOrderPost(body: MarginOrderBody1, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return MarginTradingApiFp(this.configuration).marginOrderPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Closes all open positions.
     * @summary Close margin positions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginPositionDelete(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MarginPosition>>> {
        return MarginTradingApiFp(this.configuration).marginPositionDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Closes open positions by symbol.
     * @summary Close margin position.
     * @param {string} symbol Symbol code.
     * @param {boolean} [strictValidate] Price and quantity will be checked for incrementation within the symbol&#x27;s tick size and quantity step. See the symbol&#x27;s &#x60;tick_size&#x60; and &#x60;quantity_increment&#x60;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarginTradingApi
     */
    public async marginPositionIsolatedSymbolDelete(symbol: string, strictValidate?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MarginPosition>>> {
        return MarginTradingApiFp(this.configuration).marginPositionIsolatedSymbolDelete(symbol, strictValidate, options).then((request) => request(this.axios, this.basePath));
    }
}
