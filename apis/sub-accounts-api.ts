/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Create API keys in your profile and use public API key as username and secret API key as password to authorize.
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20012 } from '../models';
import { InlineResponse20013 } from '../models';
import { InlineResponse20014 } from '../models';
import { Result } from '../models';
import { SubAccount } from '../models';
import { Transaction } from '../models';
/**
 * SubAccountsApi - axios parameter creator
 * @export
 */
export const SubAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get ACL settings.
         * @param {string} [subAccountIds] A comma-separated list of sub-accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountAclGet: async (subAccountIds?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sub-account/acl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (subAccountIds !== undefined) {
                localVarQueryParameter['sub_account_ids'] = subAccountIds;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change ACL settings.
         * @param {Array<string>} subAccountIds 
         * @param {boolean} depositAddressGenerationEnabled 
         * @param {boolean} withdrawEnabled 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountAclPostForm: async (subAccountIds: Array<string>, depositAddressGenerationEnabled: boolean, withdrawEnabled: boolean, description: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountIds' is not null or undefined
            if (subAccountIds === null || subAccountIds === undefined) {
                throw new RequiredError('subAccountIds','Required parameter subAccountIds was null or undefined when calling subAccountAclPostForm.');
            }
            // verify required parameter 'depositAddressGenerationEnabled' is not null or undefined
            if (depositAddressGenerationEnabled === null || depositAddressGenerationEnabled === undefined) {
                throw new RequiredError('depositAddressGenerationEnabled','Required parameter depositAddressGenerationEnabled was null or undefined when calling subAccountAclPostForm.');
            }
            // verify required parameter 'withdrawEnabled' is not null or undefined
            if (withdrawEnabled === null || withdrawEnabled === undefined) {
                throw new RequiredError('withdrawEnabled','Required parameter withdrawEnabled was null or undefined when calling subAccountAclPostForm.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling subAccountAclPostForm.');
            }
            const localVarPath = `/sub-account/acl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required

            if (subAccountIds) {
                subAccountIds.forEach((element) => {
                    localVarFormParams.append('sub_account_ids', element as any);
                })
            }

            if (depositAddressGenerationEnabled !== undefined) { 
                localVarFormParams.set('deposit_address_generation_enabled', depositAddressGenerationEnabled as any);
            }

            if (withdrawEnabled !== undefined) { 
                localVarFormParams.set('withdraw_enabled', withdrawEnabled as any);
            }

            if (description !== undefined) { 
                localVarFormParams.set('description', description as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Activate sub-account.
         * @param {string} subAccountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountActivatePostForm: async (subAccountIds: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountIds' is not null or undefined
            if (subAccountIds === null || subAccountIds === undefined) {
                throw new RequiredError('subAccountIds','Required parameter subAccountIds was null or undefined when calling subAccountActivatePostForm.');
            }
            const localVarPath = `/sub-account/activate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (subAccountIds !== undefined) { 
                localVarFormParams.set('sub_account_ids', subAccountIds as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get sub-account balance.
         * @param {string} subAccId Sub-account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountBalanceSubAccIdGet: async (subAccId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccId' is not null or undefined
            if (subAccId === null || subAccId === undefined) {
                throw new RequiredError('subAccId','Required parameter subAccId was null or undefined when calling subAccountBalanceSubAccIdGet.');
            }
            const localVarPath = `/sub-account/balance/{sub_acc_id}`
                .replace(`{${"sub_acc_id"}}`, encodeURIComponent(String(subAccId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get sub-account crypto address.
         * @param {string} subAccId Sub-account identifier.
         * @param {string} currency Currency code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountCryptoAddressSubAccIdCurrencyGet: async (subAccId: string, currency: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccId' is not null or undefined
            if (subAccId === null || subAccId === undefined) {
                throw new RequiredError('subAccId','Required parameter subAccId was null or undefined when calling subAccountCryptoAddressSubAccIdCurrencyGet.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling subAccountCryptoAddressSubAccIdCurrencyGet.');
            }
            const localVarPath = `/sub-account/crypto/address/{sub_acc_id}/{currency}`
                .replace(`{${"sub_acc_id"}}`, encodeURIComponent(String(subAccId)))
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Freeze sub-accounts.
         * @param {string} subAccountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountFreezePostForm: async (subAccountIds: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountIds' is not null or undefined
            if (subAccountIds === null || subAccountIds === undefined) {
                throw new RequiredError('subAccountIds','Required parameter subAccountIds was null or undefined when calling subAccountFreezePostForm.');
            }
            const localVarPath = `/sub-account/freeze`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (subAccountIds !== undefined) { 
                localVarFormParams.set('sub_account_ids', subAccountIds as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of sub-accounts per a super account.
         * @summary Get sub-accounts list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sub-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transfer funds between a super-account and a sub-account.
         * @param {number} subAccountId 
         * @param {string} amount 
         * @param {string} currency 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subAccountTransferPostForm: async (subAccountId: number, amount: string, currency: string, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountId' is not null or undefined
            if (subAccountId === null || subAccountId === undefined) {
                throw new RequiredError('subAccountId','Required parameter subAccountId was null or undefined when calling subAccountTransferPostForm.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling subAccountTransferPostForm.');
            }
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling subAccountTransferPostForm.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling subAccountTransferPostForm.');
            }
            const localVarPath = `/sub-account/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (subAccountId !== undefined) { 
                localVarFormParams.set('sub_account_id', subAccountId as any);
            }

            if (amount !== undefined) { 
                localVarFormParams.set('amount', amount as any);
            }

            if (currency !== undefined) { 
                localVarFormParams.set('currency', currency as any);
            }

            if (type !== undefined) { 
                localVarFormParams.set('type', type as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubAccountsApi - functional programming interface
 * @export
 */
export const SubAccountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get ACL settings.
         * @param {string} [subAccountIds] A comma-separated list of sub-accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountAclGet(subAccountIds?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await SubAccountsApiAxiosParamCreator(configuration).subAccountAclGet(subAccountIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Change ACL settings.
         * @param {Array<string>} subAccountIds 
         * @param {boolean} depositAddressGenerationEnabled 
         * @param {boolean} withdrawEnabled 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountAclPostForm(subAccountIds: Array<string>, depositAddressGenerationEnabled: boolean, withdrawEnabled: boolean, description: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await SubAccountsApiAxiosParamCreator(configuration).subAccountAclPostForm(subAccountIds, depositAddressGenerationEnabled, withdrawEnabled, description, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Activate sub-account.
         * @param {string} subAccountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountActivatePostForm(subAccountIds: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Result>>> {
            const localVarAxiosArgs = await SubAccountsApiAxiosParamCreator(configuration).subAccountActivatePostForm(subAccountIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get sub-account balance.
         * @param {string} subAccId Sub-account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountBalanceSubAccIdGet(subAccId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20013>>> {
            const localVarAxiosArgs = await SubAccountsApiAxiosParamCreator(configuration).subAccountBalanceSubAccIdGet(subAccId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get sub-account crypto address.
         * @param {string} subAccId Sub-account identifier.
         * @param {string} currency Currency code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountCryptoAddressSubAccIdCurrencyGet(subAccId: string, currency: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20014>>> {
            const localVarAxiosArgs = await SubAccountsApiAxiosParamCreator(configuration).subAccountCryptoAddressSubAccIdCurrencyGet(subAccId, currency, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Freeze sub-accounts.
         * @param {string} subAccountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountFreezePostForm(subAccountIds: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Result>>> {
            const localVarAxiosArgs = await SubAccountsApiAxiosParamCreator(configuration).subAccountFreezePostForm(subAccountIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of sub-accounts per a super account.
         * @summary Get sub-accounts list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SubAccount>>>> {
            const localVarAxiosArgs = await SubAccountsApiAxiosParamCreator(configuration).subAccountGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Transfer funds between a super-account and a sub-account.
         * @param {number} subAccountId 
         * @param {string} amount 
         * @param {string} currency 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountTransferPostForm(subAccountId: number, amount: string, currency: string, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Transaction>>> {
            const localVarAxiosArgs = await SubAccountsApiAxiosParamCreator(configuration).subAccountTransferPostForm(subAccountId, amount, currency, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SubAccountsApi - factory interface
 * @export
 */
export const SubAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get ACL settings.
         * @param {string} [subAccountIds] A comma-separated list of sub-accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountAclGet(subAccountIds?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return SubAccountsApiFp(configuration).subAccountAclGet(subAccountIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change ACL settings.
         * @param {Array<string>} subAccountIds 
         * @param {boolean} depositAddressGenerationEnabled 
         * @param {boolean} withdrawEnabled 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountAclPostForm(subAccountIds: Array<string>, depositAddressGenerationEnabled: boolean, withdrawEnabled: boolean, description: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return SubAccountsApiFp(configuration).subAccountAclPostForm(subAccountIds, depositAddressGenerationEnabled, withdrawEnabled, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Activate sub-account.
         * @param {string} subAccountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountActivatePostForm(subAccountIds: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Result>> {
            return SubAccountsApiFp(configuration).subAccountActivatePostForm(subAccountIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get sub-account balance.
         * @param {string} subAccId Sub-account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountBalanceSubAccIdGet(subAccId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20013>> {
            return SubAccountsApiFp(configuration).subAccountBalanceSubAccIdGet(subAccId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get sub-account crypto address.
         * @param {string} subAccId Sub-account identifier.
         * @param {string} currency Currency code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountCryptoAddressSubAccIdCurrencyGet(subAccId: string, currency: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20014>> {
            return SubAccountsApiFp(configuration).subAccountCryptoAddressSubAccIdCurrencyGet(subAccId, currency, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Freeze sub-accounts.
         * @param {string} subAccountIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountFreezePostForm(subAccountIds: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Result>> {
            return SubAccountsApiFp(configuration).subAccountFreezePostForm(subAccountIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of sub-accounts per a super account.
         * @summary Get sub-accounts list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SubAccount>>> {
            return SubAccountsApiFp(configuration).subAccountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transfer funds between a super-account and a sub-account.
         * @param {number} subAccountId 
         * @param {string} amount 
         * @param {string} currency 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subAccountTransferPostForm(subAccountId: number, amount: string, currency: string, type: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Transaction>> {
            return SubAccountsApiFp(configuration).subAccountTransferPostForm(subAccountId, amount, currency, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubAccountsApi - object-oriented interface
 * @export
 * @class SubAccountsApi
 * @extends {BaseAPI}
 */
export class SubAccountsApi extends BaseAPI {
    /**
     * 
     * @summary Get ACL settings.
     * @param {string} [subAccountIds] A comma-separated list of sub-accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public async subAccountAclGet(subAccountIds?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return SubAccountsApiFp(this.configuration).subAccountAclGet(subAccountIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Change ACL settings.
     * @param {Array<string>} subAccountIds 
     * @param {boolean} depositAddressGenerationEnabled 
     * @param {boolean} withdrawEnabled 
     * @param {string} description 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public async subAccountAclPostForm(subAccountIds: Array<string>, depositAddressGenerationEnabled: boolean, withdrawEnabled: boolean, description: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return SubAccountsApiFp(this.configuration).subAccountAclPostForm(subAccountIds, depositAddressGenerationEnabled, withdrawEnabled, description, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Activate sub-account.
     * @param {string} subAccountIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public async subAccountActivatePostForm(subAccountIds: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Result>> {
        return SubAccountsApiFp(this.configuration).subAccountActivatePostForm(subAccountIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get sub-account balance.
     * @param {string} subAccId Sub-account identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public async subAccountBalanceSubAccIdGet(subAccId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20013>> {
        return SubAccountsApiFp(this.configuration).subAccountBalanceSubAccIdGet(subAccId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get sub-account crypto address.
     * @param {string} subAccId Sub-account identifier.
     * @param {string} currency Currency code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public async subAccountCryptoAddressSubAccIdCurrencyGet(subAccId: string, currency: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20014>> {
        return SubAccountsApiFp(this.configuration).subAccountCryptoAddressSubAccIdCurrencyGet(subAccId, currency, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Freeze sub-accounts.
     * @param {string} subAccountIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public async subAccountFreezePostForm(subAccountIds: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Result>> {
        return SubAccountsApiFp(this.configuration).subAccountFreezePostForm(subAccountIds, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of sub-accounts per a super account.
     * @summary Get sub-accounts list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public async subAccountGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SubAccount>>> {
        return SubAccountsApiFp(this.configuration).subAccountGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Transfer funds between a super-account and a sub-account.
     * @param {number} subAccountId 
     * @param {string} amount 
     * @param {string} currency 
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountsApi
     */
    public async subAccountTransferPostForm(subAccountId: number, amount: string, currency: string, type: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Transaction>> {
        return SubAccountsApiFp(this.configuration).subAccountTransferPostForm(subAccountId, amount, currency, type, options).then((request) => request(this.axios, this.basePath));
    }
}
