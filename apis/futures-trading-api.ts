/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Create API keys in your profile and use public API key as username and secret API key as password to authorize.
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FuturesClearing } from '../models';
import { FuturesConfig } from '../models';
import { FuturesMarginAccount } from '../models';
import { FuturesMarginPosition } from '../models';
import { FuturesOrder } from '../models';
import { FuturesOrderBody1 } from '../models';
import { FuturesPositionHistory } from '../models';
import { FuturesTradeHistory } from '../models';
import { HiddenFuturesOrder, FuturesOrder } from '../models';
import { HiddenFuturesOrderHistory, FuturesOrderHistory } from '../models';
import { HiddenFuturesOrderRequest, FuturesOrderRequest } from '../models';
import { InlineResponse2006 } from '../models';
import { IsolatedSymbolBody3 } from '../models';
import { MarginBalance } from '../models';
import { MarginBalance, SpotBalance } from '../models';
import { OrderListBody5 } from '../models';
import { TradingFee } from '../models';
/**
 * FuturesTradingApi - axios parameter creator
 * @export
 */
export const FuturesTradingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns user's all futures margin accounts' details.
         * @summary Get all futures margin accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresAccountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns isolated futures margin account details by symbol.
         * @summary Get a futures margin account.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresAccountIsolatedSymbolGet: async (symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling futuresAccountIsolatedSymbolGet.');
            }
            const localVarPath = `/futures/account/isolated/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the created/updated futures margin account details.
         * @summary Create/update a futures margin account.
         * @param {string} marginBalance 
         * @param {string} leverage 
         * @param {boolean} strictValidate 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresAccountIsolatedSymbolPutForm: async (marginBalance: string, leverage: string, strictValidate: boolean, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marginBalance' is not null or undefined
            if (marginBalance === null || marginBalance === undefined) {
                throw new RequiredError('marginBalance','Required parameter marginBalance was null or undefined when calling futuresAccountIsolatedSymbolPutForm.');
            }
            // verify required parameter 'leverage' is not null or undefined
            if (leverage === null || leverage === undefined) {
                throw new RequiredError('leverage','Required parameter leverage was null or undefined when calling futuresAccountIsolatedSymbolPutForm.');
            }
            // verify required parameter 'strictValidate' is not null or undefined
            if (strictValidate === null || strictValidate === undefined) {
                throw new RequiredError('strictValidate','Required parameter strictValidate was null or undefined when calling futuresAccountIsolatedSymbolPutForm.');
            }
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling futuresAccountIsolatedSymbolPutForm.');
            }
            const localVarPath = `/futures/account/isolated/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (marginBalance !== undefined) { 
                localVarFormParams.set('margin_balance', marginBalance as any);
            }

            if (leverage !== undefined) { 
                localVarFormParams.set('leverage', leverage as any);
            }

            if (strictValidate !== undefined) { 
                localVarFormParams.set('strict_validate', strictValidate as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the created/updated futures margin account details.
         * @summary Create/update a futures margin account.
         * @param {IsolatedSymbolBody3} body 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresAccountIsolatedSymbolPut: async (body: IsolatedSymbolBody3, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling futuresAccountIsolatedSymbolPut.');
            }
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling futuresAccountIsolatedSymbolPut.');
            }
            const localVarPath = `/futures/account/isolated/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the user's trading balance per currency.
         * @summary Get futures trading balance.
         * @param {string} currency Currency code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresBalanceCurrencyGet: async (currency: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currency' is not null or undefined
            if (currency === null || currency === undefined) {
                throw new RequiredError('currency','Required parameter currency was null or undefined when calling futuresBalanceCurrencyGet.');
            }
            const localVarPath = `/futures/balance/{currency}`
                .replace(`{${"currency"}}`, encodeURIComponent(String(currency)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the user's futures trading balance for all currencies.
         * @summary Get futures trading balance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresBalanceGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about futures position configuration.
         * @summary Get futures position parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresConfigGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns personal trading commission rates for all contracts.
         * @summary Get all trading commissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresFeeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/fee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns personal trading commission rates for all contracts.
         * @summary Get all trading commissions.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresFeeSymbolGet: async (symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling futuresFeeSymbolGet.');
            }
            const localVarPath = `/futures/fee/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns clearing details.
         * @summary Clearing details.
         * @param {string} [currency] Currency code.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresHistoryClearingGet: async (currency?: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/history/clearing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all futures orders with trades for the last 24 hours.
         * @summary Futures orders history.
         * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
         * @param {string} [symbol] Symbol code.
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresHistoryOrderGet: async (clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/history/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (clientOrderId !== undefined) {
                localVarQueryParameter['client_order_id'] = clientOrderId;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns margin positions history.
         * @summary Futures positions history.
         * @param {string} by The name of the field to order the results by.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresHistoryPositionsGet: async (by: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'by' is not null or undefined
            if (by === null || by === undefined) {
                throw new RequiredError('by','Required parameter by was null or undefined when calling futuresHistoryPositionsGet.');
            }
            const localVarPath = `/futures/history/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (by !== undefined) {
                localVarQueryParameter['by'] = by;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the user's futures trading history.
         * @summary Futures trades history.
         * @param {number} [orderId] Order identifier.
         * @param {number} [positionId] Position identifier of the taker&#x27;s order in the trade.
         * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {string} [by] The name of the field to order the results by.
         * @param {Date} [from] Timestamp of trade or trade identifier to list from.
         * @param {Date} [till] Timestamp of trade or trade identifier to list from.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresHistoryTradeGet: async (orderId?: number, positionId?: number, symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/history/trade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['position_id'] = positionId;
            }

            if (symbol) {
                localVarQueryParameter['symbol'] = symbol.join(COLLECTION_FORMATS.csv);
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (by !== undefined) {
                localVarQueryParameter['by'] = by;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (till !== undefined) {
                localVarQueryParameter['till'] = (till as any instanceof Date) ?
                    (till as any).toISOString() :
                    till;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels a futures order.
         * @summary Cancel order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresOrderClientOrderIdDelete: async (clientOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientOrderId' is not null or undefined
            if (clientOrderId === null || clientOrderId === undefined) {
                throw new RequiredError('clientOrderId','Required parameter clientOrderId was null or undefined when calling futuresOrderClientOrderIdDelete.');
            }
            const localVarPath = `/futures/order/{client_order_id}`
                .replace(`{${"client_order_id"}}`, encodeURIComponent(String(clientOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an active futures order by 'client_order_id'.
         * @summary Get active futures order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresOrderClientOrderIdGet: async (clientOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientOrderId' is not null or undefined
            if (clientOrderId === null || clientOrderId === undefined) {
                throw new RequiredError('clientOrderId','Required parameter clientOrderId was null or undefined when calling futuresOrderClientOrderIdGet.');
            }
            const localVarPath = `/futures/order/{client_order_id}`
                .replace(`{${"client_order_id"}}`, encodeURIComponent(String(clientOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces a futures order.
         * @summary Replace futures order.
         * @param {string} quantity 
         * @param {string} price 
         * @param {string} newClientOrderId 
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresOrderClientOrderIdPatchForm: async (quantity: string, price: string, newClientOrderId: string, clientOrderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new RequiredError('quantity','Required parameter quantity was null or undefined when calling futuresOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'price' is not null or undefined
            if (price === null || price === undefined) {
                throw new RequiredError('price','Required parameter price was null or undefined when calling futuresOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'newClientOrderId' is not null or undefined
            if (newClientOrderId === null || newClientOrderId === undefined) {
                throw new RequiredError('newClientOrderId','Required parameter newClientOrderId was null or undefined when calling futuresOrderClientOrderIdPatchForm.');
            }
            // verify required parameter 'clientOrderId' is not null or undefined
            if (clientOrderId === null || clientOrderId === undefined) {
                throw new RequiredError('clientOrderId','Required parameter clientOrderId was null or undefined when calling futuresOrderClientOrderIdPatchForm.');
            }
            const localVarPath = `/futures/order/{client_order_id}`
                .replace(`{${"client_order_id"}}`, encodeURIComponent(String(clientOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (quantity !== undefined) { 
                localVarFormParams.set('quantity', quantity as any);
            }

            if (price !== undefined) { 
                localVarFormParams.set('price', price as any);
            }

            if (newClientOrderId !== undefined) { 
                localVarFormParams.set('new_client_order_id', newClientOrderId as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels all active futures orders.
         * @summary Cancel all futures orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresOrderDelete: async (symbol?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all active futures orders.
         * @summary Get all active futures orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresOrderGet: async (symbol?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new futures order list.
         * @summary Create a new futures order list.
         * @param {string} [orderListId] 
         * @param {string} [contingencyType] 
         * @param {Array<HiddenFuturesOrderRequest & FuturesOrderRequest>} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresOrderListPostForm: async (orderListId?: string, contingencyType?: string, orders?: Array<HiddenFuturesOrderRequest & FuturesOrderRequest>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required


            if (orderListId !== undefined) { 
                localVarFormParams.set('order_list_id', orderListId as any);
            }

            if (contingencyType !== undefined) { 
                localVarFormParams.set('contingency_type', contingencyType as any);
            }
            if (orders) {
                orders.forEach((element) => {
                    localVarFormParams.append('orders', element as any);
                })
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new futures order list.
         * @summary Create a new futures order list.
         * @param {OrderListBody5} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresOrderListPost: async (body?: OrderListBody5, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication BasicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new futures order.
         * @summary Create a new futures order.
         * @param {FuturesOrderBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresOrderPost: async (body: FuturesOrderBody1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling futuresOrderPost.');
            }
            const localVarPath = `/futures/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Closes all open positions.
         * @summary Close futures margin positions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresPositionDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/futures/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Closes all open positions.
         * @summary Close futures margin positions.
         * @param {string} symbol Symbol code.
         * @param {boolean} [strictValidate] Price and quantity will be checked for incrementation within the symbol&#x27;s tick size and quantity step. See the symbol&#x27;s &#x60;tick_size&#x60; and &#x60;quantity_increment&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        futuresPositionIsolatedSymbolDelete: async (symbol: string, strictValidate?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling futuresPositionIsolatedSymbolDelete.');
            }
            const localVarPath = `/futures/position/isolated/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required

            if (strictValidate !== undefined) {
                localVarQueryParameter['strict_validate'] = strictValidate;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FuturesTradingApi - functional programming interface
 * @export
 */
export const FuturesTradingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns user's all futures margin accounts' details.
         * @summary Get all futures margin accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresAccountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FuturesMarginAccount>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresAccountGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns isolated futures margin account details by symbol.
         * @summary Get a futures margin account.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresAccountIsolatedSymbolGet(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FuturesMarginAccount>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresAccountIsolatedSymbolGet(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the created/updated futures margin account details.
         * @summary Create/update a futures margin account.
         * @param {string} marginBalance 
         * @param {string} leverage 
         * @param {boolean} strictValidate 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresAccountIsolatedSymbolPutForm(marginBalance: string, leverage: string, strictValidate: boolean, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FuturesMarginAccount>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresAccountIsolatedSymbolPutForm(marginBalance, leverage, strictValidate, symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the created/updated futures margin account details.
         * @summary Create/update a futures margin account.
         * @param {IsolatedSymbolBody3} body 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresAccountIsolatedSymbolPut(body: IsolatedSymbolBody3, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FuturesMarginAccount>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresAccountIsolatedSymbolPut(body, symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the user's trading balance per currency.
         * @summary Get futures trading balance.
         * @param {string} currency Currency code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresBalanceCurrencyGet(currency: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MarginBalance>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresBalanceCurrencyGet(currency, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the user's futures trading balance for all currencies.
         * @summary Get futures trading balance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresBalanceGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MarginBalance & SpotBalance>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresBalanceGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns information about futures position configuration.
         * @summary Get futures position parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresConfigGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FuturesConfig>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresConfigGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns personal trading commission rates for all contracts.
         * @summary Get all trading commissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresFeeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TradingFee>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresFeeGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns personal trading commission rates for all contracts.
         * @summary Get all trading commissions.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresFeeSymbolGet(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<TradingFee>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresFeeSymbolGet(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns clearing details.
         * @summary Clearing details.
         * @param {string} [currency] Currency code.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresHistoryClearingGet(currency?: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FuturesClearing>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresHistoryClearingGet(currency, sort, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all futures orders with trades for the last 24 hours.
         * @summary Futures orders history.
         * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
         * @param {string} [symbol] Symbol code.
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresHistoryOrderGet(clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenFuturesOrderHistory & FuturesOrderHistory>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresHistoryOrderGet(clientOrderId, symbol, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns margin positions history.
         * @summary Futures positions history.
         * @param {string} by The name of the field to order the results by.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresHistoryPositionsGet(by: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FuturesPositionHistory>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresHistoryPositionsGet(by, sort, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the user's futures trading history.
         * @summary Futures trades history.
         * @param {number} [orderId] Order identifier.
         * @param {number} [positionId] Position identifier of the taker&#x27;s order in the trade.
         * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {string} [by] The name of the field to order the results by.
         * @param {Date} [from] Timestamp of trade or trade identifier to list from.
         * @param {Date} [till] Timestamp of trade or trade identifier to list from.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresHistoryTradeGet(orderId?: number, positionId?: number, symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FuturesTradeHistory>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresHistoryTradeGet(orderId, positionId, symbol, sort, by, from, till, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancels a futures order.
         * @summary Cancel order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderClientOrderIdDelete(clientOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresOrderClientOrderIdDelete(clientOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an active futures order by 'client_order_id'.
         * @summary Get active futures order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderClientOrderIdGet(clientOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresOrderClientOrderIdGet(clientOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replaces a futures order.
         * @summary Replace futures order.
         * @param {string} quantity 
         * @param {string} price 
         * @param {string} newClientOrderId 
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderClientOrderIdPatchForm(quantity: string, price: string, newClientOrderId: string, clientOrderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresOrderClientOrderIdPatchForm(quantity, price, newClientOrderId, clientOrderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancels all active futures orders.
         * @summary Cancel all futures orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderDelete(symbol?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FuturesOrder>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresOrderDelete(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of all active futures orders.
         * @summary Get all active futures orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderGet(symbol?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenFuturesOrder & FuturesOrder>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresOrderGet(symbol, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new futures order list.
         * @summary Create a new futures order list.
         * @param {string} [orderListId] 
         * @param {string} [contingencyType] 
         * @param {Array<HiddenFuturesOrderRequest & FuturesOrderRequest>} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderListPostForm(orderListId?: string, contingencyType?: string, orders?: Array<HiddenFuturesOrderRequest & FuturesOrderRequest>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenFuturesOrder & FuturesOrder>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresOrderListPostForm(orderListId, contingencyType, orders, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new futures order list.
         * @summary Create a new futures order list.
         * @param {OrderListBody5} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderListPost(body?: OrderListBody5, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HiddenFuturesOrder & FuturesOrder>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresOrderListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new futures order.
         * @summary Create a new futures order.
         * @param {FuturesOrderBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderPost(body: FuturesOrderBody1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresOrderPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Closes all open positions.
         * @summary Close futures margin positions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresPositionDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FuturesMarginPosition>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresPositionDelete(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Closes all open positions.
         * @summary Close futures margin positions.
         * @param {string} symbol Symbol code.
         * @param {boolean} [strictValidate] Price and quantity will be checked for incrementation within the symbol&#x27;s tick size and quantity step. See the symbol&#x27;s &#x60;tick_size&#x60; and &#x60;quantity_increment&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresPositionIsolatedSymbolDelete(symbol: string, strictValidate?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FuturesMarginPosition>>>> {
            const localVarAxiosArgs = await FuturesTradingApiAxiosParamCreator(configuration).futuresPositionIsolatedSymbolDelete(symbol, strictValidate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FuturesTradingApi - factory interface
 * @export
 */
export const FuturesTradingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns user's all futures margin accounts' details.
         * @summary Get all futures margin accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresAccountGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FuturesMarginAccount>>> {
            return FuturesTradingApiFp(configuration).futuresAccountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns isolated futures margin account details by symbol.
         * @summary Get a futures margin account.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresAccountIsolatedSymbolGet(symbol: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FuturesMarginAccount>> {
            return FuturesTradingApiFp(configuration).futuresAccountIsolatedSymbolGet(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the created/updated futures margin account details.
         * @summary Create/update a futures margin account.
         * @param {string} marginBalance 
         * @param {string} leverage 
         * @param {boolean} strictValidate 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresAccountIsolatedSymbolPutForm(marginBalance: string, leverage: string, strictValidate: boolean, symbol: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FuturesMarginAccount>> {
            return FuturesTradingApiFp(configuration).futuresAccountIsolatedSymbolPutForm(marginBalance, leverage, strictValidate, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the created/updated futures margin account details.
         * @summary Create/update a futures margin account.
         * @param {IsolatedSymbolBody3} body 
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresAccountIsolatedSymbolPut(body: IsolatedSymbolBody3, symbol: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FuturesMarginAccount>> {
            return FuturesTradingApiFp(configuration).futuresAccountIsolatedSymbolPut(body, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the user's trading balance per currency.
         * @summary Get futures trading balance.
         * @param {string} currency Currency code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresBalanceCurrencyGet(currency: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MarginBalance>> {
            return FuturesTradingApiFp(configuration).futuresBalanceCurrencyGet(currency, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the user's futures trading balance for all currencies.
         * @summary Get futures trading balance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresBalanceGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MarginBalance & SpotBalance>>> {
            return FuturesTradingApiFp(configuration).futuresBalanceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about futures position configuration.
         * @summary Get futures position parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresConfigGet(options?: AxiosRequestConfig): Promise<AxiosResponse<FuturesConfig>> {
            return FuturesTradingApiFp(configuration).futuresConfigGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns personal trading commission rates for all contracts.
         * @summary Get all trading commissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresFeeGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TradingFee>>> {
            return FuturesTradingApiFp(configuration).futuresFeeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns personal trading commission rates for all contracts.
         * @summary Get all trading commissions.
         * @param {string} symbol Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresFeeSymbolGet(symbol: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<TradingFee>>> {
            return FuturesTradingApiFp(configuration).futuresFeeSymbolGet(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns clearing details.
         * @summary Clearing details.
         * @param {string} [currency] Currency code.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresHistoryClearingGet(currency?: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FuturesClearing>>> {
            return FuturesTradingApiFp(configuration).futuresHistoryClearingGet(currency, sort, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all futures orders with trades for the last 24 hours.
         * @summary Futures orders history.
         * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
         * @param {string} [symbol] Symbol code.
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresHistoryOrderGet(clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenFuturesOrderHistory & FuturesOrderHistory>>> {
            return FuturesTradingApiFp(configuration).futuresHistoryOrderGet(clientOrderId, symbol, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns margin positions history.
         * @summary Futures positions history.
         * @param {string} by The name of the field to order the results by.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {Date} [from] Interval initial value.
         * @param {Date} [till] Interval end value.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresHistoryPositionsGet(by: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FuturesPositionHistory>>> {
            return FuturesTradingApiFp(configuration).futuresHistoryPositionsGet(by, sort, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the user's futures trading history.
         * @summary Futures trades history.
         * @param {number} [orderId] Order identifier.
         * @param {number} [positionId] Position identifier of the taker&#x27;s order in the trade.
         * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
         * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
         * @param {string} [by] The name of the field to order the results by.
         * @param {Date} [from] Timestamp of trade or trade identifier to list from.
         * @param {Date} [till] Timestamp of trade or trade identifier to list from.
         * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
         * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresHistoryTradeGet(orderId?: number, positionId?: number, symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FuturesTradeHistory>>> {
            return FuturesTradingApiFp(configuration).futuresHistoryTradeGet(orderId, positionId, symbol, sort, by, from, till, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels a futures order.
         * @summary Cancel order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderClientOrderIdDelete(clientOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return FuturesTradingApiFp(configuration).futuresOrderClientOrderIdDelete(clientOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an active futures order by 'client_order_id'.
         * @summary Get active futures order.
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderClientOrderIdGet(clientOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return FuturesTradingApiFp(configuration).futuresOrderClientOrderIdGet(clientOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces a futures order.
         * @summary Replace futures order.
         * @param {string} quantity 
         * @param {string} price 
         * @param {string} newClientOrderId 
         * @param {string} clientOrderId Unique order identifier given by a trader or the system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderClientOrderIdPatchForm(quantity: string, price: string, newClientOrderId: string, clientOrderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return FuturesTradingApiFp(configuration).futuresOrderClientOrderIdPatchForm(quantity, price, newClientOrderId, clientOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels all active futures orders.
         * @summary Cancel all futures orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderDelete(symbol?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FuturesOrder>>> {
            return FuturesTradingApiFp(configuration).futuresOrderDelete(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all active futures orders.
         * @summary Get all active futures orders.
         * @param {string} [symbol] Symbol code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderGet(symbol?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenFuturesOrder & FuturesOrder>>> {
            return FuturesTradingApiFp(configuration).futuresOrderGet(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new futures order list.
         * @summary Create a new futures order list.
         * @param {string} [orderListId] 
         * @param {string} [contingencyType] 
         * @param {Array<HiddenFuturesOrderRequest & FuturesOrderRequest>} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderListPostForm(orderListId?: string, contingencyType?: string, orders?: Array<HiddenFuturesOrderRequest & FuturesOrderRequest>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenFuturesOrder & FuturesOrder>>> {
            return FuturesTradingApiFp(configuration).futuresOrderListPostForm(orderListId, contingencyType, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new futures order list.
         * @summary Create a new futures order list.
         * @param {OrderListBody5} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderListPost(body?: OrderListBody5, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HiddenFuturesOrder & FuturesOrder>>> {
            return FuturesTradingApiFp(configuration).futuresOrderListPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new futures order.
         * @summary Create a new futures order.
         * @param {FuturesOrderBody1} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresOrderPost(body: FuturesOrderBody1, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return FuturesTradingApiFp(configuration).futuresOrderPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Closes all open positions.
         * @summary Close futures margin positions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresPositionDelete(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FuturesMarginPosition>>> {
            return FuturesTradingApiFp(configuration).futuresPositionDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Closes all open positions.
         * @summary Close futures margin positions.
         * @param {string} symbol Symbol code.
         * @param {boolean} [strictValidate] Price and quantity will be checked for incrementation within the symbol&#x27;s tick size and quantity step. See the symbol&#x27;s &#x60;tick_size&#x60; and &#x60;quantity_increment&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async futuresPositionIsolatedSymbolDelete(symbol: string, strictValidate?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FuturesMarginPosition>>> {
            return FuturesTradingApiFp(configuration).futuresPositionIsolatedSymbolDelete(symbol, strictValidate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FuturesTradingApi - object-oriented interface
 * @export
 * @class FuturesTradingApi
 * @extends {BaseAPI}
 */
export class FuturesTradingApi extends BaseAPI {
    /**
     * Returns user's all futures margin accounts' details.
     * @summary Get all futures margin accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresAccountGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FuturesMarginAccount>>> {
        return FuturesTradingApiFp(this.configuration).futuresAccountGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns isolated futures margin account details by symbol.
     * @summary Get a futures margin account.
     * @param {string} symbol Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresAccountIsolatedSymbolGet(symbol: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FuturesMarginAccount>> {
        return FuturesTradingApiFp(this.configuration).futuresAccountIsolatedSymbolGet(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the created/updated futures margin account details.
     * @summary Create/update a futures margin account.
     * @param {string} marginBalance 
     * @param {string} leverage 
     * @param {boolean} strictValidate 
     * @param {string} symbol Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresAccountIsolatedSymbolPutForm(marginBalance: string, leverage: string, strictValidate: boolean, symbol: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FuturesMarginAccount>> {
        return FuturesTradingApiFp(this.configuration).futuresAccountIsolatedSymbolPutForm(marginBalance, leverage, strictValidate, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the created/updated futures margin account details.
     * @summary Create/update a futures margin account.
     * @param {IsolatedSymbolBody3} body 
     * @param {string} symbol Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresAccountIsolatedSymbolPut(body: IsolatedSymbolBody3, symbol: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FuturesMarginAccount>> {
        return FuturesTradingApiFp(this.configuration).futuresAccountIsolatedSymbolPut(body, symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the user's trading balance per currency.
     * @summary Get futures trading balance.
     * @param {string} currency Currency code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresBalanceCurrencyGet(currency: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MarginBalance>> {
        return FuturesTradingApiFp(this.configuration).futuresBalanceCurrencyGet(currency, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the user's futures trading balance for all currencies.
     * @summary Get futures trading balance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresBalanceGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MarginBalance & SpotBalance>>> {
        return FuturesTradingApiFp(this.configuration).futuresBalanceGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns information about futures position configuration.
     * @summary Get futures position parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresConfigGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<FuturesConfig>> {
        return FuturesTradingApiFp(this.configuration).futuresConfigGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns personal trading commission rates for all contracts.
     * @summary Get all trading commissions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresFeeGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TradingFee>>> {
        return FuturesTradingApiFp(this.configuration).futuresFeeGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns personal trading commission rates for all contracts.
     * @summary Get all trading commissions.
     * @param {string} symbol Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresFeeSymbolGet(symbol: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<TradingFee>>> {
        return FuturesTradingApiFp(this.configuration).futuresFeeSymbolGet(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns clearing details.
     * @summary Clearing details.
     * @param {string} [currency] Currency code.
     * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
     * @param {Date} [from] Interval initial value.
     * @param {Date} [till] Interval end value.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresHistoryClearingGet(currency?: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FuturesClearing>>> {
        return FuturesTradingApiFp(this.configuration).futuresHistoryClearingGet(currency, sort, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns all futures orders with trades for the last 24 hours.
     * @summary Futures orders history.
     * @param {string} [clientOrderId] Unique order identifier given by a trader or the system.
     * @param {string} [symbol] Symbol code.
     * @param {Date} [from] Interval initial value.
     * @param {Date} [till] Interval end value.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresHistoryOrderGet(clientOrderId?: string, symbol?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenFuturesOrderHistory & FuturesOrderHistory>>> {
        return FuturesTradingApiFp(this.configuration).futuresHistoryOrderGet(clientOrderId, symbol, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns margin positions history.
     * @summary Futures positions history.
     * @param {string} by The name of the field to order the results by.
     * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
     * @param {Date} [from] Interval initial value.
     * @param {Date} [till] Interval end value.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresHistoryPositionsGet(by: string, sort?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FuturesPositionHistory>>> {
        return FuturesTradingApiFp(this.configuration).futuresHistoryPositionsGet(by, sort, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the user's futures trading history.
     * @summary Futures trades history.
     * @param {number} [orderId] Order identifier.
     * @param {number} [positionId] Position identifier of the taker&#x27;s order in the trade.
     * @param {Array<string>} [symbol] Comma-separated list of symbol codes.
     * @param {string} [sort] Sort order:  * Ascending, from A to Z.  * Descending, from Z to A. 
     * @param {string} [by] The name of the field to order the results by.
     * @param {Date} [from] Timestamp of trade or trade identifier to list from.
     * @param {Date} [till] Timestamp of trade or trade identifier to list from.
     * @param {number} [limit] The number of items to return. The limit can range between *1* and *1000*. 
     * @param {number} [offset] The number of items to skip before starting to collect the result set. Offset can range between *0* and *100000*. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresHistoryTradeGet(orderId?: number, positionId?: number, symbol?: Array<string>, sort?: string, by?: string, from?: Date, till?: Date, limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FuturesTradeHistory>>> {
        return FuturesTradingApiFp(this.configuration).futuresHistoryTradeGet(orderId, positionId, symbol, sort, by, from, till, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancels a futures order.
     * @summary Cancel order.
     * @param {string} clientOrderId Unique order identifier given by a trader or the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresOrderClientOrderIdDelete(clientOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return FuturesTradingApiFp(this.configuration).futuresOrderClientOrderIdDelete(clientOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an active futures order by 'client_order_id'.
     * @summary Get active futures order.
     * @param {string} clientOrderId Unique order identifier given by a trader or the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresOrderClientOrderIdGet(clientOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return FuturesTradingApiFp(this.configuration).futuresOrderClientOrderIdGet(clientOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replaces a futures order.
     * @summary Replace futures order.
     * @param {string} quantity 
     * @param {string} price 
     * @param {string} newClientOrderId 
     * @param {string} clientOrderId Unique order identifier given by a trader or the system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresOrderClientOrderIdPatchForm(quantity: string, price: string, newClientOrderId: string, clientOrderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return FuturesTradingApiFp(this.configuration).futuresOrderClientOrderIdPatchForm(quantity, price, newClientOrderId, clientOrderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancels all active futures orders.
     * @summary Cancel all futures orders.
     * @param {string} [symbol] Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresOrderDelete(symbol?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FuturesOrder>>> {
        return FuturesTradingApiFp(this.configuration).futuresOrderDelete(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all active futures orders.
     * @summary Get all active futures orders.
     * @param {string} [symbol] Symbol code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresOrderGet(symbol?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenFuturesOrder & FuturesOrder>>> {
        return FuturesTradingApiFp(this.configuration).futuresOrderGet(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new futures order list.
     * @summary Create a new futures order list.
     * @param {string} [orderListId] 
     * @param {string} [contingencyType] 
     * @param {Array<HiddenFuturesOrderRequest & FuturesOrderRequest>} [orders] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresOrderListPostForm(orderListId?: string, contingencyType?: string, orders?: Array<HiddenFuturesOrderRequest & FuturesOrderRequest>, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenFuturesOrder & FuturesOrder>>> {
        return FuturesTradingApiFp(this.configuration).futuresOrderListPostForm(orderListId, contingencyType, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new futures order list.
     * @summary Create a new futures order list.
     * @param {OrderListBody5} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresOrderListPost(body?: OrderListBody5, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HiddenFuturesOrder & FuturesOrder>>> {
        return FuturesTradingApiFp(this.configuration).futuresOrderListPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new futures order.
     * @summary Create a new futures order.
     * @param {FuturesOrderBody1} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresOrderPost(body: FuturesOrderBody1, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return FuturesTradingApiFp(this.configuration).futuresOrderPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Closes all open positions.
     * @summary Close futures margin positions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresPositionDelete(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FuturesMarginPosition>>> {
        return FuturesTradingApiFp(this.configuration).futuresPositionDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Closes all open positions.
     * @summary Close futures margin positions.
     * @param {string} symbol Symbol code.
     * @param {boolean} [strictValidate] Price and quantity will be checked for incrementation within the symbol&#x27;s tick size and quantity step. See the symbol&#x27;s &#x60;tick_size&#x60; and &#x60;quantity_increment&#x60;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesTradingApi
     */
    public async futuresPositionIsolatedSymbolDelete(symbol: string, strictValidate?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FuturesMarginPosition>>> {
        return FuturesTradingApiFp(this.configuration).futuresPositionIsolatedSymbolDelete(symbol, strictValidate, options).then((request) => request(this.axios, this.basePath));
    }
}
